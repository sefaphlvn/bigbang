// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: bridge.proto

package bridge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SnapshotService_GetSnapshotKeys_FullMethodName      = "/bridge.SnapshotService/GetSnapshotKeys"
	SnapshotService_GetSnapshotResources_FullMethodName = "/bridge.SnapshotService/GetSnapshotResources"
)

// SnapshotServiceClient is the client API for SnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotServiceClient interface {
	GetSnapshotKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SnapshotKeyList, error)
	GetSnapshotResources(ctx context.Context, in *SnapshotKey, opts ...grpc.CallOption) (*SnapshotResourceList, error)
}

type snapshotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotServiceClient(cc grpc.ClientConnInterface) SnapshotServiceClient {
	return &snapshotServiceClient{cc}
}

func (c *snapshotServiceClient) GetSnapshotKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SnapshotKeyList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnapshotKeyList)
	err := c.cc.Invoke(ctx, SnapshotService_GetSnapshotKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) GetSnapshotResources(ctx context.Context, in *SnapshotKey, opts ...grpc.CallOption) (*SnapshotResourceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnapshotResourceList)
	err := c.cc.Invoke(ctx, SnapshotService_GetSnapshotResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotServiceServer is the server API for SnapshotService service.
// All implementations must embed UnimplementedSnapshotServiceServer
// for forward compatibility.
type SnapshotServiceServer interface {
	GetSnapshotKeys(context.Context, *Empty) (*SnapshotKeyList, error)
	GetSnapshotResources(context.Context, *SnapshotKey) (*SnapshotResourceList, error)
	mustEmbedUnimplementedSnapshotServiceServer()
}

// UnimplementedSnapshotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnapshotServiceServer struct{}

func (UnimplementedSnapshotServiceServer) GetSnapshotKeys(context.Context, *Empty) (*SnapshotKeyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshotKeys not implemented")
}
func (UnimplementedSnapshotServiceServer) GetSnapshotResources(context.Context, *SnapshotKey) (*SnapshotResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshotResources not implemented")
}
func (UnimplementedSnapshotServiceServer) mustEmbedUnimplementedSnapshotServiceServer() {}
func (UnimplementedSnapshotServiceServer) testEmbeddedByValue()                         {}

// UnsafeSnapshotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotServiceServer will
// result in compilation errors.
type UnsafeSnapshotServiceServer interface {
	mustEmbedUnimplementedSnapshotServiceServer()
}

func RegisterSnapshotServiceServer(s grpc.ServiceRegistrar, srv SnapshotServiceServer) {
	// If the following call pancis, it indicates UnimplementedSnapshotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SnapshotService_ServiceDesc, srv)
}

func _SnapshotService_GetSnapshotKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).GetSnapshotKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_GetSnapshotKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).GetSnapshotKeys(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_GetSnapshotResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).GetSnapshotResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_GetSnapshotResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).GetSnapshotResources(ctx, req.(*SnapshotKey))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapshotService_ServiceDesc is the grpc.ServiceDesc for SnapshotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.SnapshotService",
	HandlerType: (*SnapshotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSnapshotKeys",
			Handler:    _SnapshotService_GetSnapshotKeys_Handler,
		},
		{
			MethodName: "GetSnapshotResources",
			Handler:    _SnapshotService_GetSnapshotResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge.proto",
}

const (
	PokeService_Poke_FullMethodName = "/bridge.PokeService/Poke"
)

// PokeServiceClient is the client API for PokeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PokeServiceClient interface {
	Poke(ctx context.Context, in *PokeRequest, opts ...grpc.CallOption) (*PokeResponse, error)
}

type pokeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPokeServiceClient(cc grpc.ClientConnInterface) PokeServiceClient {
	return &pokeServiceClient{cc}
}

func (c *pokeServiceClient) Poke(ctx context.Context, in *PokeRequest, opts ...grpc.CallOption) (*PokeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PokeResponse)
	err := c.cc.Invoke(ctx, PokeService_Poke_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokeServiceServer is the server API for PokeService service.
// All implementations must embed UnimplementedPokeServiceServer
// for forward compatibility.
type PokeServiceServer interface {
	Poke(context.Context, *PokeRequest) (*PokeResponse, error)
	mustEmbedUnimplementedPokeServiceServer()
}

// UnimplementedPokeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPokeServiceServer struct{}

func (UnimplementedPokeServiceServer) Poke(context.Context, *PokeRequest) (*PokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poke not implemented")
}
func (UnimplementedPokeServiceServer) mustEmbedUnimplementedPokeServiceServer() {}
func (UnimplementedPokeServiceServer) testEmbeddedByValue()                     {}

// UnsafePokeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokeServiceServer will
// result in compilation errors.
type UnsafePokeServiceServer interface {
	mustEmbedUnimplementedPokeServiceServer()
}

func RegisterPokeServiceServer(s grpc.ServiceRegistrar, srv PokeServiceServer) {
	// If the following call pancis, it indicates UnimplementedPokeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PokeService_ServiceDesc, srv)
}

func _PokeService_Poke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokeServiceServer).Poke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PokeService_Poke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokeServiceServer).Poke(ctx, req.(*PokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PokeService_ServiceDesc is the grpc.ServiceDesc for PokeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PokeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.PokeService",
	HandlerType: (*PokeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Poke",
			Handler:    _PokeService_Poke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge.proto",
}

const (
	ResourceService_ValidateResource_FullMethodName = "/bridge.ResourceService/ValidateResource"
)

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceClient interface {
	ValidateResource(ctx context.Context, in *ValidateResourceRequest, opts ...grpc.CallOption) (*ValidateResourceResponse, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) ValidateResource(ctx context.Context, in *ValidateResourceRequest, opts ...grpc.CallOption) (*ValidateResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResourceResponse)
	err := c.cc.Invoke(ctx, ResourceService_ValidateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations must embed UnimplementedResourceServiceServer
// for forward compatibility.
type ResourceServiceServer interface {
	ValidateResource(context.Context, *ValidateResourceRequest) (*ValidateResourceResponse, error)
	mustEmbedUnimplementedResourceServiceServer()
}

// UnimplementedResourceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceServiceServer struct{}

func (UnimplementedResourceServiceServer) ValidateResource(context.Context, *ValidateResourceRequest) (*ValidateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateResource not implemented")
}
func (UnimplementedResourceServiceServer) mustEmbedUnimplementedResourceServiceServer() {}
func (UnimplementedResourceServiceServer) testEmbeddedByValue()                         {}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_ValidateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ValidateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ValidateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ValidateResource(ctx, req.(*ValidateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateResource",
			Handler:    _ResourceService_ValidateResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge.proto",
}

const (
	ActiveClientsService_GetActiveClients_FullMethodName = "/bridge.ActiveClientsService/GetActiveClients"
	ActiveClientsService_GetActiveClient_FullMethodName  = "/bridge.ActiveClientsService/GetActiveClient"
)

// ActiveClientsServiceClient is the client API for ActiveClientsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActiveClientsServiceClient interface {
	GetActiveClients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActiveClientsResponse, error)
	GetActiveClient(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*ActiveClientResponse, error)
}

type activeClientsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActiveClientsServiceClient(cc grpc.ClientConnInterface) ActiveClientsServiceClient {
	return &activeClientsServiceClient{cc}
}

func (c *activeClientsServiceClient) GetActiveClients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActiveClientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActiveClientsResponse)
	err := c.cc.Invoke(ctx, ActiveClientsService_GetActiveClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeClientsServiceClient) GetActiveClient(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*ActiveClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActiveClientResponse)
	err := c.cc.Invoke(ctx, ActiveClientsService_GetActiveClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActiveClientsServiceServer is the server API for ActiveClientsService service.
// All implementations must embed UnimplementedActiveClientsServiceServer
// for forward compatibility.
type ActiveClientsServiceServer interface {
	GetActiveClients(context.Context, *Empty) (*ActiveClientsResponse, error)
	GetActiveClient(context.Context, *NodeRequest) (*ActiveClientResponse, error)
	mustEmbedUnimplementedActiveClientsServiceServer()
}

// UnimplementedActiveClientsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActiveClientsServiceServer struct{}

func (UnimplementedActiveClientsServiceServer) GetActiveClients(context.Context, *Empty) (*ActiveClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveClients not implemented")
}
func (UnimplementedActiveClientsServiceServer) GetActiveClient(context.Context, *NodeRequest) (*ActiveClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveClient not implemented")
}
func (UnimplementedActiveClientsServiceServer) mustEmbedUnimplementedActiveClientsServiceServer() {}
func (UnimplementedActiveClientsServiceServer) testEmbeddedByValue()                              {}

// UnsafeActiveClientsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActiveClientsServiceServer will
// result in compilation errors.
type UnsafeActiveClientsServiceServer interface {
	mustEmbedUnimplementedActiveClientsServiceServer()
}

func RegisterActiveClientsServiceServer(s grpc.ServiceRegistrar, srv ActiveClientsServiceServer) {
	// If the following call pancis, it indicates UnimplementedActiveClientsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActiveClientsService_ServiceDesc, srv)
}

func _ActiveClientsService_GetActiveClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveClientsServiceServer).GetActiveClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveClientsService_GetActiveClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveClientsServiceServer).GetActiveClients(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveClientsService_GetActiveClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveClientsServiceServer).GetActiveClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveClientsService_GetActiveClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveClientsServiceServer).GetActiveClient(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActiveClientsService_ServiceDesc is the grpc.ServiceDesc for ActiveClientsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActiveClientsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.ActiveClientsService",
	HandlerType: (*ActiveClientsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveClients",
			Handler:    _ActiveClientsService_GetActiveClients_Handler,
		},
		{
			MethodName: "GetActiveClient",
			Handler:    _ActiveClientsService_GetActiveClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge.proto",
}
