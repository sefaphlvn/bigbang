// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: bridge.proto

package bridge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SnapshotKeyService_GetSnapshotKeys_FullMethodName = "/bridge.SnapshotKeyService/GetSnapshotKeys"
)

// SnapshotKeyServiceClient is the client API for SnapshotKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotKeyServiceClient interface {
	GetSnapshotKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SnapshotKeyList, error)
}

type snapshotKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotKeyServiceClient(cc grpc.ClientConnInterface) SnapshotKeyServiceClient {
	return &snapshotKeyServiceClient{cc}
}

func (c *snapshotKeyServiceClient) GetSnapshotKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SnapshotKeyList, error) {
	out := new(SnapshotKeyList)
	err := c.cc.Invoke(ctx, SnapshotKeyService_GetSnapshotKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotKeyServiceServer is the server API for SnapshotKeyService service.
// All implementations must embed UnimplementedSnapshotKeyServiceServer
// for forward compatibility
type SnapshotKeyServiceServer interface {
	GetSnapshotKeys(context.Context, *Empty) (*SnapshotKeyList, error)
	mustEmbedUnimplementedSnapshotKeyServiceServer()
}

// UnimplementedSnapshotKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotKeyServiceServer struct {
}

func (UnimplementedSnapshotKeyServiceServer) GetSnapshotKeys(context.Context, *Empty) (*SnapshotKeyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshotKeys not implemented")
}
func (UnimplementedSnapshotKeyServiceServer) mustEmbedUnimplementedSnapshotKeyServiceServer() {}

// UnsafeSnapshotKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotKeyServiceServer will
// result in compilation errors.
type UnsafeSnapshotKeyServiceServer interface {
	mustEmbedUnimplementedSnapshotKeyServiceServer()
}

func RegisterSnapshotKeyServiceServer(s grpc.ServiceRegistrar, srv SnapshotKeyServiceServer) {
	s.RegisterService(&SnapshotKeyService_ServiceDesc, srv)
}

func _SnapshotKeyService_GetSnapshotKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotKeyServiceServer).GetSnapshotKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotKeyService_GetSnapshotKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotKeyServiceServer).GetSnapshotKeys(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapshotKeyService_ServiceDesc is the grpc.ServiceDesc for SnapshotKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.SnapshotKeyService",
	HandlerType: (*SnapshotKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSnapshotKeys",
			Handler:    _SnapshotKeyService_GetSnapshotKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge.proto",
}

const (
	SnapshotResourceService_GetSnapshotResources_FullMethodName = "/bridge.SnapshotResourceService/GetSnapshotResources"
)

// SnapshotResourceServiceClient is the client API for SnapshotResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotResourceServiceClient interface {
	GetSnapshotResources(ctx context.Context, in *SnapshotKey, opts ...grpc.CallOption) (*SnapshotResourceList, error)
}

type snapshotResourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotResourceServiceClient(cc grpc.ClientConnInterface) SnapshotResourceServiceClient {
	return &snapshotResourceServiceClient{cc}
}

func (c *snapshotResourceServiceClient) GetSnapshotResources(ctx context.Context, in *SnapshotKey, opts ...grpc.CallOption) (*SnapshotResourceList, error) {
	out := new(SnapshotResourceList)
	err := c.cc.Invoke(ctx, SnapshotResourceService_GetSnapshotResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotResourceServiceServer is the server API for SnapshotResourceService service.
// All implementations must embed UnimplementedSnapshotResourceServiceServer
// for forward compatibility
type SnapshotResourceServiceServer interface {
	GetSnapshotResources(context.Context, *SnapshotKey) (*SnapshotResourceList, error)
	mustEmbedUnimplementedSnapshotResourceServiceServer()
}

// UnimplementedSnapshotResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotResourceServiceServer struct {
}

func (UnimplementedSnapshotResourceServiceServer) GetSnapshotResources(context.Context, *SnapshotKey) (*SnapshotResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshotResources not implemented")
}
func (UnimplementedSnapshotResourceServiceServer) mustEmbedUnimplementedSnapshotResourceServiceServer() {
}

// UnsafeSnapshotResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotResourceServiceServer will
// result in compilation errors.
type UnsafeSnapshotResourceServiceServer interface {
	mustEmbedUnimplementedSnapshotResourceServiceServer()
}

func RegisterSnapshotResourceServiceServer(s grpc.ServiceRegistrar, srv SnapshotResourceServiceServer) {
	s.RegisterService(&SnapshotResourceService_ServiceDesc, srv)
}

func _SnapshotResourceService_GetSnapshotResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotResourceServiceServer).GetSnapshotResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotResourceService_GetSnapshotResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotResourceServiceServer).GetSnapshotResources(ctx, req.(*SnapshotKey))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapshotResourceService_ServiceDesc is the grpc.ServiceDesc for SnapshotResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.SnapshotResourceService",
	HandlerType: (*SnapshotResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSnapshotResources",
			Handler:    _SnapshotResourceService_GetSnapshotResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge.proto",
}

const (
	PokeService_Poke_FullMethodName = "/bridge.PokeService/Poke"
)

// PokeServiceClient is the client API for PokeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PokeServiceClient interface {
	Poke(ctx context.Context, in *PokeRequest, opts ...grpc.CallOption) (*PokeResponse, error)
}

type pokeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPokeServiceClient(cc grpc.ClientConnInterface) PokeServiceClient {
	return &pokeServiceClient{cc}
}

func (c *pokeServiceClient) Poke(ctx context.Context, in *PokeRequest, opts ...grpc.CallOption) (*PokeResponse, error) {
	out := new(PokeResponse)
	err := c.cc.Invoke(ctx, PokeService_Poke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokeServiceServer is the server API for PokeService service.
// All implementations must embed UnimplementedPokeServiceServer
// for forward compatibility
type PokeServiceServer interface {
	Poke(context.Context, *PokeRequest) (*PokeResponse, error)
	mustEmbedUnimplementedPokeServiceServer()
}

// UnimplementedPokeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPokeServiceServer struct {
}

func (UnimplementedPokeServiceServer) Poke(context.Context, *PokeRequest) (*PokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poke not implemented")
}
func (UnimplementedPokeServiceServer) mustEmbedUnimplementedPokeServiceServer() {}

// UnsafePokeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokeServiceServer will
// result in compilation errors.
type UnsafePokeServiceServer interface {
	mustEmbedUnimplementedPokeServiceServer()
}

func RegisterPokeServiceServer(s grpc.ServiceRegistrar, srv PokeServiceServer) {
	s.RegisterService(&PokeService_ServiceDesc, srv)
}

func _PokeService_Poke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokeServiceServer).Poke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PokeService_Poke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokeServiceServer).Poke(ctx, req.(*PokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PokeService_ServiceDesc is the grpc.ServiceDesc for PokeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PokeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.PokeService",
	HandlerType: (*PokeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Poke",
			Handler:    _PokeService_Poke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge.proto",
}

const (
	ErrorService_GetNodeErrors_FullMethodName = "/bridge.ErrorService/GetNodeErrors"
)

// ErrorServiceClient is the client API for ErrorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrorServiceClient interface {
	GetNodeErrors(ctx context.Context, in *NodeErrorRequest, opts ...grpc.CallOption) (*NodeErrorResponse, error)
}

type errorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorServiceClient(cc grpc.ClientConnInterface) ErrorServiceClient {
	return &errorServiceClient{cc}
}

func (c *errorServiceClient) GetNodeErrors(ctx context.Context, in *NodeErrorRequest, opts ...grpc.CallOption) (*NodeErrorResponse, error) {
	out := new(NodeErrorResponse)
	err := c.cc.Invoke(ctx, ErrorService_GetNodeErrors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorServiceServer is the server API for ErrorService service.
// All implementations must embed UnimplementedErrorServiceServer
// for forward compatibility
type ErrorServiceServer interface {
	GetNodeErrors(context.Context, *NodeErrorRequest) (*NodeErrorResponse, error)
	mustEmbedUnimplementedErrorServiceServer()
}

// UnimplementedErrorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedErrorServiceServer struct {
}

func (UnimplementedErrorServiceServer) GetNodeErrors(context.Context, *NodeErrorRequest) (*NodeErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeErrors not implemented")
}
func (UnimplementedErrorServiceServer) mustEmbedUnimplementedErrorServiceServer() {}

// UnsafeErrorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorServiceServer will
// result in compilation errors.
type UnsafeErrorServiceServer interface {
	mustEmbedUnimplementedErrorServiceServer()
}

func RegisterErrorServiceServer(s grpc.ServiceRegistrar, srv ErrorServiceServer) {
	s.RegisterService(&ErrorService_ServiceDesc, srv)
}

func _ErrorService_GetNodeErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorServiceServer).GetNodeErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorService_GetNodeErrors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorServiceServer).GetNodeErrors(ctx, req.(*NodeErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrorService_ServiceDesc is the grpc.ServiceDesc for ErrorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.ErrorService",
	HandlerType: (*ErrorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeErrors",
			Handler:    _ErrorService_GetNodeErrors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge.proto",
}
