// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: snapshot.proto

package stats

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SnapshotKeyService_GetSnapshotKeys_FullMethodName = "/snapshot.SnapshotKeyService/GetSnapshotKeys"
)

// SnapshotKeyServiceClient is the client API for SnapshotKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotKeyServiceClient interface {
	GetSnapshotKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SnapshotKeyList, error)
}

type snapshotKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotKeyServiceClient(cc grpc.ClientConnInterface) SnapshotKeyServiceClient {
	return &snapshotKeyServiceClient{cc}
}

func (c *snapshotKeyServiceClient) GetSnapshotKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SnapshotKeyList, error) {
	out := new(SnapshotKeyList)
	err := c.cc.Invoke(ctx, SnapshotKeyService_GetSnapshotKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotKeyServiceServer is the server API for SnapshotKeyService service.
// All implementations must embed UnimplementedSnapshotKeyServiceServer
// for forward compatibility
type SnapshotKeyServiceServer interface {
	GetSnapshotKeys(context.Context, *Empty) (*SnapshotKeyList, error)
	mustEmbedUnimplementedSnapshotKeyServiceServer()
}

// UnimplementedSnapshotKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotKeyServiceServer struct {
}

func (UnimplementedSnapshotKeyServiceServer) GetSnapshotKeys(context.Context, *Empty) (*SnapshotKeyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshotKeys not implemented")
}
func (UnimplementedSnapshotKeyServiceServer) mustEmbedUnimplementedSnapshotKeyServiceServer() {}

// UnsafeSnapshotKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotKeyServiceServer will
// result in compilation errors.
type UnsafeSnapshotKeyServiceServer interface {
	mustEmbedUnimplementedSnapshotKeyServiceServer()
}

func RegisterSnapshotKeyServiceServer(s grpc.ServiceRegistrar, srv SnapshotKeyServiceServer) {
	s.RegisterService(&SnapshotKeyService_ServiceDesc, srv)
}

func _SnapshotKeyService_GetSnapshotKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotKeyServiceServer).GetSnapshotKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotKeyService_GetSnapshotKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotKeyServiceServer).GetSnapshotKeys(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapshotKeyService_ServiceDesc is the grpc.ServiceDesc for SnapshotKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snapshot.SnapshotKeyService",
	HandlerType: (*SnapshotKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSnapshotKeys",
			Handler:    _SnapshotKeyService_GetSnapshotKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snapshot.proto",
}

const (
	SnapshotResourceService_GetSnapshotResources_FullMethodName = "/snapshot.SnapshotResourceService/GetSnapshotResources"
)

// SnapshotResourceServiceClient is the client API for SnapshotResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotResourceServiceClient interface {
	GetSnapshotResources(ctx context.Context, in *SnapshotKey, opts ...grpc.CallOption) (*SnapshotResourceList, error)
}

type snapshotResourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotResourceServiceClient(cc grpc.ClientConnInterface) SnapshotResourceServiceClient {
	return &snapshotResourceServiceClient{cc}
}

func (c *snapshotResourceServiceClient) GetSnapshotResources(ctx context.Context, in *SnapshotKey, opts ...grpc.CallOption) (*SnapshotResourceList, error) {
	out := new(SnapshotResourceList)
	err := c.cc.Invoke(ctx, SnapshotResourceService_GetSnapshotResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotResourceServiceServer is the server API for SnapshotResourceService service.
// All implementations must embed UnimplementedSnapshotResourceServiceServer
// for forward compatibility
type SnapshotResourceServiceServer interface {
	GetSnapshotResources(context.Context, *SnapshotKey) (*SnapshotResourceList, error)
	mustEmbedUnimplementedSnapshotResourceServiceServer()
}

// UnimplementedSnapshotResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotResourceServiceServer struct {
}

func (UnimplementedSnapshotResourceServiceServer) GetSnapshotResources(context.Context, *SnapshotKey) (*SnapshotResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshotResources not implemented")
}
func (UnimplementedSnapshotResourceServiceServer) mustEmbedUnimplementedSnapshotResourceServiceServer() {
}

// UnsafeSnapshotResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotResourceServiceServer will
// result in compilation errors.
type UnsafeSnapshotResourceServiceServer interface {
	mustEmbedUnimplementedSnapshotResourceServiceServer()
}

func RegisterSnapshotResourceServiceServer(s grpc.ServiceRegistrar, srv SnapshotResourceServiceServer) {
	s.RegisterService(&SnapshotResourceService_ServiceDesc, srv)
}

func _SnapshotResourceService_GetSnapshotResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotResourceServiceServer).GetSnapshotResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotResourceService_GetSnapshotResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotResourceServiceServer).GetSnapshotResources(ctx, req.(*SnapshotKey))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapshotResourceService_ServiceDesc is the grpc.ServiceDesc for SnapshotResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snapshot.SnapshotResourceService",
	HandlerType: (*SnapshotResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSnapshotResources",
			Handler:    _SnapshotResourceService_GetSnapshotResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snapshot.proto",
}
